---
import MarkdownIt from 'markdown-it';
import Image from 'src/components/global/image/image.astro';
import CTA from 'src/components/global/cta/cta.astro';
const { content, image, cta, layout, grid_items } = Astro.props;
const md = new MarkdownIt({ html: true });
---
<style lang="scss" is:global>
  .grid-alternate {
    @extend %primary-wrapper;
    display: grid;
    grid-template-areas: "content" "media" "items";
    row-gap: 3.5rem;
    padding: 4rem 0;
    
    .rt > :last-child {
      margin-bottom: 0;
    }

    @include media-mobile-lg {
      padding-left: 1rem;
      padding-right: 1rem;
    }

    @include media-tablet-sm {
      padding-top: 9rem;
      padding-bottom: 9rem;

      &:not(.mini) {
        padding-top: 6rem;
        padding-bottom: 6rem;
      }
    }

    @include media-tablet {
      grid-template-columns: 4fr 6fr;
      grid-template-rows: auto 1fr;
      column-gap: 2rem;
    }

    @include media-laptop {
      grid-template-columns: repeat(2, 1fr);
    }

    &.grid-alternate--top_hat {
      @include media-tablet {
        grid-template-areas:
          "content content"
          "media items"
      }
    }

    &.grid-alternate--media_left {
      @include media-tablet {
        grid-template-areas:
          "media content"
          "media items"
      }
    }

    &.grid-alternate--media_right {
      @include media-tablet {
        grid-template-areas:
          "content media"
          "items media"
      }
    }

    .content {
      grid-area: content;
      position: relative;
    }
    .media {
      grid-area: media;
      align-self: var(--align);
    }
    .items {
      grid-area: items;
      display: grid;
      grid-template-rows: min-content;
      gap: 2rem;
      padding-left: 0;
      margin: 0;
      list-style: none;

      @include media-tablet-sm {
        &.items--grid_2,
        &.items--grid_3 {
          grid-template-columns: repeat(2, 1fr);
        }
      }

      @include media-tablet {
        &.items--grid_3 {
          grid-template-columns: repeat(3, 1fr);
        }
      }
    }

    .image {
      margin-bottom: -50px;

      @include media-tablet-max {
        z-index: -1;
      }

      @include media-tablet {
        margin-bottom: 0;
        flex: 0 0 50%;
      }

      &--small {
        @extend .image;
        @include media-tablet {
          flex: 0 0 35%;
        }
      }

      &--large {
        @extend .image;
      }
    }
  }

  @include section-animate {
    .grid-alternate {
      > * {
        opacity: 0;
        transition: all 0.5s ease-in-out;
      }
      > *:first-child {
        transform: translateX(10vw);
      }
      > *:last-child {
        transform: translateX(-10vw);
      }
      &.grid-alternate--left {
        > *:first-child {
          transform: translateX(-10vw);
        }
        > *:last-child {
          transform: translateX(10vw);
        }
      }
    }
    &.animate {
      .grid-alternate,
      .grid-alternate.grid-alternate--left {
        > * {
          opacity: 1;
          transform: translateX(0vw);
        }
      }  
    }
  }
</style>
<div class:list={[
    `grid-alternate`,
    `grid-alternate--${layout.format}`,
    { mini: layout.is_mini }
  ]} data-grid-alternate>
  <div class="media" style={{'--align': layout.media_align }}>
    { image && <Image image={image}
      srcset={[400,500,600,700,800,1000,1200,1400,1600]}
      sizes={ layout.image_width === 'small'
        ? '(max-width: 767px) 90vw,(max-width: 1650px) calc(35vw - 45px), 560px'
        : '(max-width: 767px) 90vw,(max-width: 1650px) calc(50vw - 45px), 800px'
      }
    />}
  </div>
  <div class="content">
    { content && <div class:list={["rt","rt--wide"]} set:html={md.render(content)}></div>}
    { cta && <CTA {...cta} />}
  </div>
  { grid_items && (
    <ul class:list={[`items`,`items--${layout.items}`]}>
      { grid_items.map((item) => (
        <li>
          { item.image && <Image image={item.image}
            srcset={[200,300,400,500,600,660,780]}
            sizes={ layout.image_width === 'small'
              ? '(max-width: 579px) 50vw,(max-width: 767px) 33vw,(max-width: 1650px) 20vw, 328px'
              : '(max-width: 767px) 50vw,(max-width: 1650px) 24vw, 386px'
            }
          />}
          { item.content && (
            <div class="rt" set:html={md.render(item.content)}></div>
          )}
        </li>
      )) }
    </ul>
  )}
</div>