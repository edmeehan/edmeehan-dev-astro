---
import MarkdownIt from 'markdown-it';
import Image from 'src/components/global/image/image.astro';
import CTA from 'src/components/global/cta/cta.astro';
const { content, image, cta, layout, grid_items } = Astro.props;
const md = new MarkdownIt({ html: true });
---
<style lang="scss" is:global>
  .grid-alternate {
    @extend %primary-wrapper;
    padding: 4.5rem 0;

    @include media-mobile-lg {
      padding-left: 1rem;
      padding-right: 1rem;
    }

    @include media-tablet {
      display: flex;
      flex-direction: row;
      justify-content: space-evenly;
      align-items: var(--align-items, center);
    }

    // &.grid-alternate--left {}

    &.grid-alternate--right {
      @include media-tablet {
        flex-direction: row-reverse;
      }
    }

    .content {
      position: relative;
      
      @include media-tablet {
        flex: 0 1 auto;
      }

      @include media-tablet-max {
        padding-bottom: 4rem;
      }
    }
    .image {
      margin-bottom: -50px;

      @include media-tablet-max {
        z-index: -1;
      }

      @include media-tablet {
        margin-bottom: 0;
        flex: 0 0 50%;
      }

      &--small {
        @extend .image;
        @include media-tablet {
          flex: 0 0 35%;
        }
      }

      &--large {
        @extend .image;
      }
    }
    .items {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1.5rem;
      padding-left: 0;
      margin: 0;
      list-style: none;

      &--small {
        @extend .items;
        @include media-tablet-sm {
          grid-template-columns: repeat(3, 1fr);
        }
      }

      &--large {
        @extend .items;
      }
    }
  }

  .section--animate {
    .grid-alternate {
      > * {
        opacity: 0;
        transition: all 0.5s ease-in-out;
      }
      > *:first-child {
        transform: translateX(10vw);
      }
      > *:last-child {
        transform: translateX(-10vw);
      }
      &.grid-alternate--left {
        > *:first-child {
          transform: translateX(-10vw);
        }
        > *:last-child {
          transform: translateX(10vw);
        }
      }
    }
    &.animate {
      .grid-alternate,
      .grid-alternate.grid-alternate--left {
        > * {
          opacity: 1;
          transform: translateX(0vw);
        }
      }  
    }
  }
</style>

<div class:list={[`grid-alternate`,`grid-alternate--${layout.image_align}`]} data-grid-alternate
  style={{'--align-items': layout.image_vert }}
>
  <div class:list={[`image--${layout.image_width}`]}>
    { image && <Image image={image}
      srcset={[400,500,600,700,800,1000,1200,1400,1600]}
      sizes={ layout.image_width === 'small'
        ? '(max-width: 767px) 90vw,(max-width: 1650px) calc(35vw - 45px), 560px'
        : '(max-width: 767px) 90vw,(max-width: 1650px) calc(50vw - 45px), 800px'
      }
    />}
  </div>
  <div class="content">
    { content && <div class="rt" set:html={md.render(content)}></div>}
    { cta && <CTA {...cta} />}
    { grid_items && (
      <ul class:list={[`items--${layout.image_width}`]}>
        { grid_items.map((item) => (
          <li>
            { item.image && <Image image={item.image}
              srcset={[200,300,400,500,600,660,780]}
              sizes={ layout.image_width === 'small'
                ? '(max-width: 579px) 50vw,(max-width: 767px) 33vw,(max-width: 1650px) 20vw, 328px'
                : '(max-width: 767px) 50vw,(max-width: 1650px) 24vw, 386px'
              }
            />}
            { item.content && (
              <div
                class:list={['rt']}
                set:html={md.render(item.content)}
              ></div>
            )}
          </li>
        )) }
      </ul>
    )}
  </div>
</div>