---
import Bubbles from 'src/components/bubbles.astro';

const { transition, is_first, is_last, index, background, prev, next, animation} = Astro.props;
const svg_id = `#${transition}-${background}${background === 'loud' ? `-${next?.background}` : ''}`;
const set_transition = transition && !is_last;
const set_prev = !is_first; // && prev.background !== 'loud';
---
<style lang="scss" is:global>
  $transition_swoosh: 12.5vw;
  $transition_swoosh_offset: 6.75vw;
  $transition_curve: 6.6vw;
  $transition_curve_offset: 1vw;

  [data-layout-section] {
    position: relative;

    &.section--primary {
      background: $color_primary;
    }

    &.section--secondary {
      background: $color_secondary;
    }

    &.section--loud {
      background: linear-gradient(0deg, $color_grad_1A, $color_grad_1B);
      margin-bottom: 0!important;

      .svg[data-svg-transition] {
        transform: translateY(1px);
      }
    }

    &.section--swoosh {
      margin-bottom: -($transition_swoosh);
      > .content {
        margin-bottom: -6vw;
        &.content--prev-b-loud.content--prev-t-curve {
          margin-bottom: -10vw;
        }
        &.content--prev-b-loud.content--prev-t-swoosh {
          margin-bottom: -11.7vw;
        }
      }
    }

    &.section--curve {
      margin-bottom: -($transition_curve);
      > .content {
        margin-bottom: -1vw;
        &.content--prev-b-loud.content--prev-t-curve {
          margin-bottom: -4vw;
        }
        &.content--prev-b-loud.content--prev-t-swoosh {
          margin-bottom: -1vw;
        }
      }
    }

    &.section--last {
      > .content {
        &.content--prev-b-loud.content--prev-t-curve {
          margin-bottom: -4vw;
        }
        &.content--prev-b-loud.content--prev-t-swoosh {
          margin-bottom: -5.7vw;
        }
      }
    }

    > .content {
      padding-left: $layout_gutter;
      padding-right: $layout_gutter;
      position: relative;
      z-index: $zindex_foreground;

      &--prev-t-curve:not(.content--prev-b-loud) {
        padding-top: $transition_curve_offset;
      }
      &--prev-t-swoosh:not(.content--prev-b-loud) {
        padding-top: $transition_swoosh_offset;
      }
      &--prev-b-loud {
        &.content--prev-t-curve {
          transform: translateY(-4vw);
        }
        &.content--prev-t-swoosh {
          transform: translateY(-5.7vw);
        }
      }
    }

    > .svg[data-svg-transition] {
      width: 100%;
      height: 0;
      position: relative;
      z-index: $zindex_background;
      padding-bottom: 0;

      svg {
        position: absolute; 
        height: 100%; 
        width: 100%; 
        left: 0; 
        top: 0;
      }
    }

    .svg--curve[data-svg-transition] {
      padding-bottom: $transition_curve;
    }

    .svg--swoosh[data-svg-transition] {
      padding-bottom: $transition_swoosh;
    }
  }
</style>

<section
  data-layout-section
  data-index={ index }
  data-animate={ animation }
  class:list={[
    `section--${background}`,
    {[`section--last`]: is_last},
    {[`section--${transition}`]: set_transition},
    {[`section--animate`]: animation}
  ]}
>
  <div class:list={[
    'content',
    {[`content--prev-t-${prev?.transition}`]: set_prev },
    {[`content--prev-b-${prev?.background}`]: set_prev },
    {'content--prev-none': !set_prev }
    ]}>
    <slot />
  </div>
  { background === 'loud' && (
    <Bubbles />
  )}
  { set_transition && (
    <div class:list={[`svg`,`svg--${transition}`]} data-svg-transition>
      <svg>
        <use xlink:href={svg_id}></use>
      </svg>
    </div>
  )}
</section>

<script>
  const sectionAnimation = document.querySelectorAll('[data-animate]');
  const hasObserverSupport = !!window.IntersectionObserver
  if (sectionAnimation && hasObserverSupport) {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0, root: null, rootMargin: '-30% 0% -30% 0%' });
    [...sectionAnimation].forEach(section => observer.observe(section));
  }
</script>
