---
import {imgix} from 'src/shared/utilities.js'
const { image, images, desktop:dspec, mobile:mspec } = Astro.props;
const display_images = image ? [image] : images;
const use_art_direction = display_images.length > 1;
// display_images.forEach(item => {
//   if (item.srcset && item.width) {
//     item._srcset = item.srcset.map(set => `${imgix(item.src, set, 1)} ${set}w`).toString();
//   }
// });
let [desktop, mobile] = display_images;
if (!mobile) mobile = desktop;
// '(min-width: 768px)'
// '(max-width: 767px)'
---
<style lang="scss" is:global>
  [data-global-image] {
    position: relative;
    aspect-ratio: var(--mobile-ratio);
    max-width: var(--mobile-max-width);
    
    img {
      width: 100%;
      height: 100%;
      display: block;
      object-fit: contain;
    }

    @include media-tablet {
      aspect-ratio: var(--desktop-ratio);
      max-width: var(--desktop-max-width);
    }
  }
</style>
{ display_images.length > 0 && (
  <div data-global-image style={{
    '--desktop-ratio': `${desktop.width}/${desktop.height}`,
    '--desktop-max-width': `${desktop.width}px`,
    '--mobile-ratio': `${mobile.width}/${mobile.height}`,
    '--mobile-max-width': `${mobile.width}px`,
  }} >
  {!use_art_direction && display_images.map(item => (
    <img src={item.src}
      alt={item.alt}
      width={item.width}
      height={item.height}
      loading={item.loading}
    />
  ))}
  {use_art_direction && (
    <picture>
      {display_images.map(item => (
        <source src={item.src}
          srcset={item._srcset}
          media={item.media}
          width={item.width}
          height={item.height}
        />
      ))}
      <img src={display_images[0].path}
        alt={display_images[0].alt}
        loading={display_images[0].loading}
      />
    </picture>
  )}
  </div>
)}